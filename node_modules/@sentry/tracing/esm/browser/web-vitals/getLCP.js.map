{"version":3,"file":"getLCP.js","sources":["../../../../../src/browser/web-vitals/getLCP.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/largest-contentful-paint/#sec-largest-contentful-paint-interface\nexport interface LargestContentfulPaint extends PerformanceEntry {\n  renderTime: DOMHighResTimeStamp;\n  loadTime: DOMHighResTimeStamp;\n  size: number;\n  id: string;\n  url: string;\n  element?: Element;\n  toJSON(): Record<string, string>;\n}\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\nexport const getLCP = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEntry): void => {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    const value = entry.startTime;\n\n    // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n    if (value < visibilityWatcher.firstHiddenTime) {\n      metric.value = value;\n      metric.entries.push(entry);\n    }\n\n    if (report) {\n      report();\n    }\n  };\n\n  const po = observe('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    const stopListening = (): void => {\n      if (!reportedMetricIDs[metric.id]) {\n        po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n  }\n};\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;;AAWA,MAAA,iBAAA,GAAA,EAAA,CAAA;AACA;AACA,MAAA,MAAA,GAAA,CAAA,QAAA,EAAA,gBAAA,KAAA;AACA,EAAA,MAAA,iBAAA,GAAA,oBAAA,EAAA,CAAA;AACA,EAAA,MAAA,MAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA;AACA,EAAA,IAAA,MAAA,CAAA;AACA;AACA,EAAA,MAAA,YAAA,GAAA,CAAA,KAAA,KAAA;AACA;AACA;AACA,IAAA,MAAA,KAAA,GAAA,KAAA,CAAA,SAAA,CAAA;AACA;AACA;AACA;AACA,IAAA,IAAA,KAAA,GAAA,iBAAA,CAAA,eAAA,EAAA;AACA,MAAA,MAAA,CAAA,KAAA,GAAA,KAAA,CAAA;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,IAAA,MAAA,EAAA;AACA,MAAA,MAAA,EAAA,CAAA;AACA,KAAA;AACA,GAAA,CAAA;AACA;AACA,EAAA,MAAA,EAAA,GAAA,OAAA,CAAA,0BAAA,EAAA,YAAA,CAAA,CAAA;AACA;AACA,EAAA,IAAA,EAAA,EAAA;AACA,IAAA,MAAA,GAAA,YAAA,CAAA,QAAA,EAAA,MAAA,EAAA,gBAAA,CAAA,CAAA;AACA;AACA,IAAA,MAAA,aAAA,GAAA,MAAA;AACA,MAAA,IAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,EAAA,CAAA,EAAA;AACA,QAAA,EAAA,CAAA,WAAA,EAAA,CAAA,GAAA,CAAA,YAAA,EAAA,CAAA;AACA,QAAA,EAAA,CAAA,UAAA,EAAA,CAAA;AACA,QAAA,iBAAA,CAAA,MAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA;AACA,QAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA,OAAA;AACA,KAAA,CAAA;AACA;AACA;AACA;AACA;AACA,IAAA,CAAA,SAAA,EAAA,OAAA,CAAA,CAAA,OAAA,CAAA,IAAA,IAAA;AACA,MAAA,gBAAA,CAAA,IAAA,EAAA,aAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA;AACA,IAAA,QAAA,CAAA,aAAA,EAAA,IAAA,CAAA,CAAA;AACA,GAAA;AACA;;;;"}